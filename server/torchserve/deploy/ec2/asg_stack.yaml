AWSTemplateFormatVersion: "2010-09-09"
Description: Create EC2 instance to host TorchServe and S3 bucket to store model (.mar) files


Parameters:
  InstanceTypeParameter:
    Description: EC2 instance type. Default is t2.micro.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.small
      - t3a.medium
      - m1.small
      - m6a.large
      - c6i.large
      - m1.large
  LatestAmiId:
    Description: Public parameter store namespace of the desired AMI
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  ModelName:
    Description: Name of the .mar model archive file
    Type: String
    Default: 'object_detector.mar'
  UserDataParam:
    Description: EC2 instance user data script
    Type: String


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.1.0.0/24
      AvailabilityZone: 
        !Select
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: 
        !Select
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: An execution role for a Lambda function launched by CloudFormation
      ManagedPolicyArns:
        - !Ref LambdaPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'

  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy for a Lambda function launched by CloudFormation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:SendCommand'
            Resource: 
              - !Sub 
                - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${documentName}
                - documentName: !Ref CopyModelFromS3SSMDocument
          - Effect: Allow
            Action:
              - 'ssm:SendCommand'
            Resource:
            - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition:
              StringEquals:
                ssm:ResourceTag/aws:autoscaling:groupName: !Ref AutoScalingGroup

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      # In seconds, default is 3 seconds
      Timeout: 120
      Environment:
        Variables:
          TargetTagValue: !Ref AutoScalingGroup
          DocumentName: !Ref CopyModelFromS3SSMDocument
      Code:
        ZipFile: |
          import os
          import boto3
          ssm = boto3.client('ssm')

          #target_tag_key = os.environ.get('TargetTagKey')
          target_tag_value = os.environ.get('TargetTagValue')
          document_name = os.environ.get('DocumentName')

          def handler(event, context):
            response = ssm.send_command(
                Targets=[{'Key': 'tag:aws:autoscaling:groupName', 'Values': [target_tag_value]}],
                #Targets=[{'Key': target_tag_key, 'Values': [target_tag_value]}],
                DocumentName=document_name,
            )

            if response['ResponseMetadata']['HTTPStatusCode'] != 200:
                raise Exception("Failed to send command")

  S3NotifyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt S3Bucket.Arn

  CopyModelFromS3SSMDocument: 
    Type: AWS::SSM::Document
    Properties:
      DocumentType: "Command"
      DocumentFormat: "YAML"
      TargetType: "/AWS::EC2::Instance"
      Content:
        schemaVersion: "2.2"
        description: "Copy model file from S3 and restart TorchServe"
        mainSteps:
          - action: "aws:runShellScript"
            name: "runShellScript"
            inputs: 
              runCommand:
                - !Sub
                  - "aws s3api get-object --bucket ${bucketName} --key ${objectName} /models/${objectName}"
                  - bucketName: !Ref S3Bucket
                    objectName: !Ref ModelName
                - "sudo /usr/local/bin/torchserve --stop"
                - "sudo /usr/local/bin/torchserve --model-store /models --models all --ncs --start &> /dev/null &"
              workingDirectory: /
              timeoutSeconds: "120"

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to TorchServe prediction endpoints and SSH traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt ELBSecurityGroup.GroupId
          Description: TorchServe HTTP prediction port
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          CidrIp: 127.0.0.1/32
          Description: TorchServe HTTP management port
        - IpProtocol: tcp
          FromPort: 7070
          ToPort: 7070
          SourceSecurityGroupId: !GetAtt ELBSecurityGroup.GroupId
          Description: TorchServe gRPC prediction port
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: SSH port

  EC2IamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        - PolicyName: ReadS3ModelInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource: !Join [',', [!GetAtt S3Bucket.Arn, '/*']]

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: [!Ref EC2IamRole]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceTypeParameter
        IamInstanceProfile: 
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !GetAtt EC2SecurityGroup.GroupId
        BlockDeviceMappings:
          # Root volume, the proper value depends on the AMI (for a HVM AMI it's either /dev/sda1 or /dev/xvda)
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              Encrypted: false
              VolumeSize: 20
              VolumeType: gp2
        PrivateDnsNameOptions:
          EnableResourceNameDnsAAAARecord: false
          EnableResourceNameDnsARecord: true
          HostnameType: ip-name
        UserData:
          Fn::Base64:
            # `UserDataParam` is expected to contain a placeholder "__BUCKET_NAME__". We replace it with
            # the name assigned to the resource `S3Bucket`.
            # Can't use `Sub` (and include sth like ${BucketNamePlaceholderInUserData} in UserDataParam) 
            # because its first param can't be a `Ref`.
            #!Sub
              #- Ref: UserDataParam
              #- BucketNamePlaceholderInUserData: !Ref S3Bucket      
            !Join 
              - ""
              - - !Select [0, Fn::Split: [ "__BUCKET_NAME__", Ref: UserDataParam]]
                - !Ref S3Bucket
                - !Select [1, Fn::Split: [ "__BUCKET_NAME__", Ref: UserDataParam]]

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '1'
      MaxSize: '2' #'4'
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      # If this resource specifies public subnets and is also in a VPC that is defined in the same stack template, you must use the 
      # DependsOn attribute to declare a dependency on the VPC-gateway attachment.
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        #- !Ref GRPCTargetGroup
        - !Ref HTTPTargetGroup
    DependsOn: IGWAttachment

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'

  CPUAlarmHigh:
     Type: AWS::CloudWatch::Alarm
     Properties:
        AlarmDescription: Scale-up if CPU > 70% for 10 minutes
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Statistic: Average
        # Don't set below 300, the metric CPUUtilization can only have a datapoint every five minutes.
        Period: '300'
        EvaluationPeriods: '2'
        Threshold: '70'
        AlarmActions: [ !Ref ScaleUpPolicy ]
        Dimensions:
          - Name: AutoScalingGroupName
            Value: !Ref AutoScalingGroup
        ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 50% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      # Don't set below 300, the metric CPUUtilization can only have a datapoint every five minutes.
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '50'
      AlarmActions: [ !Ref ScaleDownPolicy ]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to TorchServe prediction endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          Description: TorchServe HTTP prediction port
        - IpProtocol: tcp
          FromPort: 7070
          ToPort: 7070
          CidrIp: 0.0.0.0/0
          Description: TorchServe gRPC prediction port

  # GRPCTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Port: 7070
  #     Protocol: HTTP
  #     ProtocolVersion: GRPC
  #     TargetType: instance
  #     VpcId: !Ref VPC

  HTTPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
      HealthCheckPath: "/ping"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200

  # It looks like there's only support for HTTPS when the target group has ProtocolVersion==gRPC
  # GRPCListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: "forward"
  #         TargetGroupArn: !Ref GRPCTargetGroup
  #     LoadBalancerArn: !Ref ELB
  #     Port: 7070
  #     Protocol: "HTTP"

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref HTTPTargetGroup
      LoadBalancerArn: !Ref ELB
      Port: 8080
      Protocol: "HTTP"

  ELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - !GetAtt ELBSecurityGroup.GroupId
      IpAddressType: ipv4
      # To specify an Elastic IP address, specify SubnetMappings instead of Subnets.
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2


Outputs:
  S3BucketName:
    Description: "Object detection models bucket" 
    Value: !Ref 'S3Bucket'
  LambdaArn:
    Description: "Arn of the lambda function that runs an SSM document that updates the model server"
    Value: !GetAtt Lambda.Arn
